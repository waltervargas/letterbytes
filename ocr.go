package letterbytes

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"

	"github.com/tjgq/sane"
	"golang.org/x/image/tiff"
)

func OCR(img *sane.Image) (string, error) {
	buf, err := convertImageToBuffer(img)
	if err != nil {
		return "", err
	}
	text, err := extractTextFromBufferExec(buf)
	if err != nil {
		return "", err
	}

	return text, nil
}

func convertImageToBuffer(img *sane.Image) (*bytes.Buffer, error) {
	buf := new(bytes.Buffer)
	err := tiff.Encode(buf, img, nil)
	if err != nil {
		return nil, fmt.Errorf("error encoding PNG: %w", err)
	}
	return buf, nil
}

// This function uses Tesseract go package, but the ocr output is not as good as
// calling tesseract command line
//
// func extractTextFromBuffer(buf *bytes.Buffer) (string, error) {
// 	client := gosseract.NewClient()
// 	defer client.Close()

// 	client.SetImageFromBytes(buf.Bytes())
// 	client.SetLanguage("deu")

// 	text, err := client.Text()
// 	if err != nil {
// 		return "", fmt.Errorf("error extracting text with Tesseract: %w", err)
// 	}

// 	return text, nil
// }

// extractTextFromBuffer uses the Tesseract command-line tool to extract text from a byte buffer
func extractTextFromBufferExec(buf *bytes.Buffer) (string, error) {
	// Create a temporary file for the TIFF image
	tempFile, err := os.CreateTemp("", "ocr-*.tiff")
	if err != nil {
		return "", fmt.Errorf("error creating temporary file: %w", err)
	}
	defer os.Remove(tempFile.Name())

	// Write the buffer to the temporary file
	_, err = tempFile.Write(buf.Bytes())
	if err != nil {
		tempFile.Close()
		return "", fmt.Errorf("error writing to temporary file: %w", err)
	}
	tempFile.Close()

	// Define the output file for Tesseract
	outputFile := tempFile.Name() + "-output"

	// Call the Tesseract command
	cmd := exec.Command("tesseract", tempFile.Name(), outputFile, "-l", "deu")
	if err := cmd.Run(); err != nil {
		return "", fmt.Errorf("error running Tesseract command: %w", err)
	}

	// Read the output file generated by Tesseract
	outputTextFile := outputFile + ".txt"
	text, err := os.ReadFile(outputTextFile)
	if err != nil {
		return "", fmt.Errorf("error reading Tesseract output file: %w", err)
	}
	defer os.Remove(outputTextFile)

	return string(text), nil
}
